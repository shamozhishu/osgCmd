/************************************************************************
	osg/Vec2d
*************************************************************************/
class Vec2d
{
public:
    /** Number of vector components. */
    enum { num_components = 2 };

    /** Constructor that sets all components of the vector to zero */
	Vec2d();

	Vec2d(double x, double y);

	inline Vec2d(const Vec2f& vec);

	inline bool operator == (const Vec2d& v) const;

	inline bool operator <  (const Vec2d& v) const;

	inline void set(double x, double y);

	inline double x() const;
	inline double y() const;

    /** Returns true if all components have values that are not NaN. */
	inline bool valid() const;
    /** Returns true if at least one component has value NaN. */
	inline bool isNaN() const;

    /** Dot product. */
	inline double operator * (const Vec2d& rhs) const;

    /** Multiply by scalar. */
	inline Vec2d operator * (double rhs) const;

    /** Divide by scalar. */
	inline Vec2d operator / (double rhs) const;

    /** Binary vector add. */
	inline Vec2d operator + (const Vec2d& rhs) const;

    /** Binary vector subtract. */
	inline Vec2d operator - (const Vec2d& rhs) const;

    /** Negation operator. Returns the negative of the Vec2d. */
	inline Vec2d operator - () const;

    /** Length of the vector = sqrt( vec . vec ) */
	inline double length() const;

    /** Length squared of the vector = vec . vec */
	inline double length2(void) const;

    /** Normalize the vector so that it has length unity.
        * Returns the previous length of the vector.
    */
	inline double normalize();
};

/** multiply by vector components. */
inline Vec2d componentMultiply(const Vec2d& lhs, const Vec2d& rhs);

/** divide rhs components by rhs vector components. */
inline Vec2d componentDivide(const Vec2d& lhs, const Vec2d& rhs);
