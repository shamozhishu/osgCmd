/************************************************************************
	osg/Vec4d
*************************************************************************/
class Vec4d
{
public:
    /** Number of vector components. */
    enum { num_components = 4 };

    /** Constructor that sets all components of the vector to zero */
	Vec4d();

	Vec4d(double x, double y, double z, double w);

	Vec4d(const Vec3d& v3, double w);

	inline Vec4d(const Vec4f& vec);

	inline bool operator == (const Vec4d& v) const;

	inline bool operator <  (const Vec4d& v) const;

	inline void set(double x, double y, double z, double w);

	inline double x() const;
	inline double y() const;
	inline double z() const;
	inline double w() const;

	inline double r() const;
	inline double g() const;
	inline double b() const;
	inline double a() const;

	inline unsigned int asABGR() const;

	inline unsigned int asRGBA() const;

    /** Returns true if all components have values that are not NaN. */
	inline bool valid() const;
    /** Returns true if at least one component has value NaN. */
	inline bool isNaN() const;

    /** Dot product. */
	inline double operator * (const Vec4d& rhs) const;

    /** Multiply by scalar. */
	inline Vec4d operator * (double rhs) const;

    /** Divide by scalar. */
	inline Vec4d operator / (double rhs) const;

    /** Binary vector add. */
	inline Vec4d operator + (const Vec4d& rhs) const;

    /** Binary vector subtract. */
	inline Vec4d operator - (const Vec4d& rhs) const;

    /** Negation operator. Returns the negative of the Vec4d. */
	inline Vec4d operator - () const;

    /** Length of the vector = sqrt( vec . vec ) */
	inline double length() const;

    /** Length squared of the vector = vec . vec */
	inline double length2() const;

    /** Normalize the vector so that it has length unity.
        * Returns the previous length of the vector.
    */
	inline double normalize();
};

/** multiply by vector components. */
inline Vec4d componentMultiply(const Vec4d& lhs, const Vec4d& rhs);

/** divide rhs components by rhs vector components. */
inline Vec4d componentDivide(const Vec4d& lhs, const Vec4d& rhs);
